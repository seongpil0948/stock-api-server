<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.dsi.system.menu.dao.MenuDao">

	<select id="selectMenuTree" parameterType="kr.co.dsi.system.menu.dto.req.MenuReadReqDto" resultType="kr.co.dsi.system.menu.dto.res.MenuReadResDto">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.getMenuTree
		SQL 명 : 메뉴 계층 조회(관리자 용도)
		*/
		SELECT
		result.menu_id																		/* 메뉴 아이디 */
		,case when mnu.hpos_menu_id IS NULL then '#' else mnu.hpos_menu_id end as parent_menu_id		/* 상위 메뉴 아이디 */
		,mnu.menu_idx	as menu_index														/* 메뉴 순서 */
		,result.menu_path																	/* 메뉴 경로 */
		,result.menu_url																	/* 메뉴 링크 */
		,result.menu_order																	/* 메뉴 트리 정렬 순서 */
		,t.trans_msg as menu_name														/* 메뉴 명 */
		,result.lvl as LEVEL																/* 메뉴 깊이 */
		,mnu.menu_kd_cd as menu_kind_code													/* 메뉴 타입(관리자, 사용자) */
		,mnu.menu_dscr as menu_description													/* 메뉴 설명 */
		,GROUP_CONCAT(DISTINCT role.role_nm) as roleMappingInfo								/* 매핑된 역할명 정보 */
		,mnu.use_yn																			/* 사용 여부 */
		,result.assigned
		,date_format(mnu.reg_dt, '%Y-%m-%d %H:%i') as create_date														/* 생성 일시 */
		,date_format(mnu.upd_dt, '%Y-%m-%d %H:%i') as update_date
		,mnu.reg_user_id as create_user_id													/* 생성자 아이디 */
		,mnu.upd_user_id as update_user_id													/* 수정자 아이디 */
		,u1.user_nm as create_user_name														/* 생성자 명	*/
		,u2.user_nm as update_user_name														/* 수정자 명	*/
		FROM(
			WITH RECURSIVE cte AS (
				SELECT
					menu_id
					, menu_nm
					, hpos_menu_id
					, 1 AS lvl
					, menu_nm AS menu_path
					, CONVERT(menu_idx, CHAR) AS menu_order
					, menu_path as menu_url
					, menu_kd_cd
				FROM TB_MENU
				WHERE
					hpos_menu_id IS NULL
					<if test="useYn != null">
							AND use_yn = #{useYn}
					</if>

				UNION ALL

				SELECT
					b.menu_id
					, b.menu_nm
					, b.hpos_menu_id
					, c.lvl+1 AS lvl
					, CONCAT(c.menu_path,' > ', b.menu_nm) AS menu_path
					, CONCAT(c.menu_order,',', b.menu_idx) AS menu_order
					, b.menu_path as menu_url
					, b.menu_kd_cd
				FROM TB_MENU b
				INNER JOIN cte c
					ON b.hpos_menu_id = c.menu_id
					<if test="useYn != null">
							AND b.use_yn = #{useYn}
					</if>
			)
			SELECT
				a.menu_id																				/* 메뉴 아이디 */
				,a.menu_path																			/* 메뉴 경로 */
				,a.menu_url																				/* 메뉴 링크 */																			
				,a.menu_order																			/* 메뉴 트리 정렬 기준 */
				,a.menu_nm																				/* 메뉴 명 */
				,a.lvl																					/* 메뉴 깊이 */
				,case when COUNT(mapg.MENU_ID) > 0 then TRUE ELSE FALSE END AS assigned
			FROM cte a
			LEFT OUTER JOIN TB_ROLE_MENU_MAPG mapg
				ON a.menu_id = mapg.MENU_ID
				<where>
					<if test ="roleId != null">
						mapg.role_ID = #{roleId}															/* 메뉴 할당 여부 체크 용도 */
					</if> 
					<if test="menuId != null">
						AND a.menu_id LIKE CONCAT('%', REGEXP_REPLACE(#{menuId}, '(\_|\%)', '\\\\\\1'), '%')
					</if>
					<if test="menuName != null">
						AND a.menu_nm LIKE CONCAT('%', REGEXP_REPLACE(#{menuName}, '(\_|\%)', '\\\\\\1'), '%')
					</if>
					<if test="menuKindCode != null">
						AND a.menu_kd_cd = #{menuKindCode}
					</if>
				</where>
			GROUP BY a.menu_id, a.menu_path, a.menu_nm, a.lvl, a.menu_url, a.menu_order
		) result
		INNER JOIN TB_MENU mnu ON result.menu_id = mnu.menu_id
		LEFT OUTER JOIN TB_USER u1 ON mnu.reg_user_id = u1.user_id
		LEFT OUTER JOIN TB_USER u2 ON mnu.upd_user_id = u2.user_id
		LEFT OUTER JOIN TB_ROLE_MENU_MAPG mapg on mnu.menu_id = mapg.menu_id
		LEFT OUTER JOIN TB_ROLE role on mapg.role_id = role.role_id
		LEFT OUTER JOIN TB_TRANS t ON t.lnk_id = result.menu_id
		and t.locale_cd = #{localeCd}
		GROUP BY
			result.menu_id
			,mnu.hpos_menu_id
			,mnu.menu_idx
			,result.menu_path
			,result.menu_url
			,result.menu_order
			,result.menu_nm
			,result.lvl
			,mnu.menu_kd_cd
			,mnu.menu_dscr
			,mnu.use_yn
			,result.assigned
			,mnu.reg_dt
			,mnu.upd_dt
			,mnu.reg_user_id
			,mnu.upd_user_id
			,u1.user_nm
			,u2.user_nm
			,mapg.menu_id
			,t.trans_msg
		ORDER by result.menu_order asc
	</select>

	<select id="selectMenuList" parameterType="kr.co.dsi.system.menu.dto.req.MenuReadReqDto" resultType="kr.co.dsi.system.menu.dto.res.MenuReadResDto">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.getMenu
		SQL 명 : 메뉴 단건 또는 목록 조회(관리자 용도)
		*/
		SELECT
			a.menu_id																	/* 메뉴 아이디 */
			,a.menu_kd_cd as menu_kind_code												/* 메뉴 타입(관리자, 사용자) */
			,a.menu_nm as menu_name														/* 메뉴 명 */
			,a.menu_descr as menu_description											/* 메뉴 설명 */
			,a.menu_idx	as menu_index													/* 메뉴 순서 */
			,a.menu_path	as menu_url														/* 메뉴 링크 */
			,a.use_yn																	/* 사용 여부 */
			,date_format(a.crte_dt, '%Y-%m-%d %H:%i') as create_date					/* 생성 일시	*/
			,a.crte_usr_id as create_user_id											/* 생성자 아이디 */
			,case when a.hpos_menu_id IS NULL then '#' else a.hpos_menu_id end as parent_menu_id	/* 상위 메뉴 아이디 */
			,date_format(a.upd_dt, '%Y-%m-%d %H:%i') as update_date					/* 수정 일시	*/
			,a.upd_usr_id as update_user_id												/* 수정자 아이디 */
			,u1.usr_nm as create_user_name												/* 생성자 명	*/
			,u2.usr_nm as update_user_name												/* 수정자 명	*/
		FROM tb_menu a
		LEFT OUTER JOIN tb_usr u1 on a.crte_usr_id = u1.usr_id
		LEFT OUTER JOIN tb_usr u2 on a.upd_usr_id = u2.usr_id
		<where>
			<if test="menuId != null and menuId != ''">
				AND a.menu_id LIKE CONCAT('%', REGEXP_REPLACE(#{menuId}, '(\_|\%)', '\\\\\\1'), '%')
			</if>
			<if test="menuName != null and menuName != ''">
				AND a.menu_nm LIKE CONCAT('%', REGEXP_REPLACE(#{menuName}, '(\_|\%)', '\\\\\\1'), '%')
			</if>
			<if test="menuKindCode != null">
				AND a.menu_kd_cd = #{menuKindCode}
			</if>
		</where>
		ORDER BY a.crte_dt DESC
	</select>

	<select id="selectMenu" parameterType="kr.co.dsi.system.menu.dto.req.MenuReadReqDto" resultType="kr.co.dsi.system.menu.dto.res.MenuReadResDto">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.getMenu
		SQL 명 : 메뉴 단건 또는 목록 조회(관리자 용도)
		*/
		SELECT
			a.menu_id																	/* 메뉴 아이디 */
			,a.menu_kd_cd as menu_kind_code												/* 메뉴 타입(관리자, 사용자) */
			,a.menu_nm as menu_name														/* 메뉴 명 */
			,a.menu_dscr as menu_description											/* 메뉴 설명 */
			,a.menu_idx	as menu_index													/* 메뉴 순서 */
			,a.menu_path	as menu_url														/* 메뉴 링크 */
			,a.use_yn																	/* 사용 여부 */
			,date_format(a.reg_dt, '%Y-%m-%d %H:%i') as create_date					/* 생성 일시	*/
			,a.reg_user_id as create_user_id											/* 생성자 아이디 */
			,case when a.hpos_menu_id IS NULL then '#' else a.hpos_menu_id end as parent_menu_id	/* 상위 메뉴 아이디 */
			,date_format(a.upd_dt, '%Y-%m-%d %H:%i') as update_date					/* 수정 일시	*/
			,a.upd_user_id as update_user_id												/* 수정자 아이디 */
			,u1.user_nm as create_user_name												/* 생성자 명	*/
			,u2.user_nm as update_user_name												/* 수정자 명	*/
		FROM TB_MENU a
		LEFT OUTER JOIN TB_USER u1 on a.reg_user_id = u1.user_id
		LEFT OUTER JOIN TB_USER u2 on a.upd_user_id = u2.user_id
		<where>
			a.menu_id = #{menuId}
		</where>
	</select>

	<select id="disableConstraint">
        /*
        SQL ID : kr.co.dsi.system.menu.dao.MenuDao.disableConstraint
        SQL 명: 테이블 외래키 체크 조건 disable
        */
        SET FOREIGN_KEY_CHECKS=0
    </select>

	<select id="enableConstraint">
        /*
        SQL ID : kr.co.dsi.system.menu.dao.MenuDao.disableConstraint
        SQL 명: 테이블 외래키 체크 조건 enable
        */
        SET FOREIGN_KEY_CHECKS=1
    </select>

	<insert id="insertMenu" parameterType="java.util.List">
        /*
        SQL ID : kr.co.dsi.system.menu.dao.MenuDao.inserMenu
        SQL 명: 메뉴 등록
        */
        insert into TB_MENU (
        MENU_ID
        , MENU_KD_CD
        , MENU_NM
        , MENU_DSCR
        , MENU_PATH
        , MENU_IDX
        , USE_YN
        , REG_DT
        , REG_USER_ID
        , HPOS_MENU_ID)
        values
        (
        #{menuId, jdbcType=VARCHAR}
        , #{menuKdCd, jdbcType=VARCHAR}
        , #{menuNm, jdbcType=VARCHAR}
        , #{menuDescr, jdbcType=VARCHAR}
        , #{menuUrl, jdbcType=VARCHAR}
        , #{menuIdx, jdbcType=INTEGER}
        , #{useYn, jdbcType=VARCHAR}
        , current_timestamp()
        , #{crteUsrId, jdbcType=VARCHAR}
        , #{hposMenuId, jdbcType=VARCHAR}
        )
    </insert>

	<update id="updateMenu" parameterType="kr.co.dsi.system.menu.entity.Menu">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.updateMenu
		SQL 명: 메뉴 수정
		*/
		UPDATE TB_MENU
		<set>
			<if test="menuId != null">
				menu_id = #{menuId, jdbcType=VARCHAR},
			</if>
			<if test="menuKdCd != null">
				menu_kd_cd = #{menuKdCd, jdbcType=VARCHAR},
			</if>
			<if test="menuNm != null">
				menu_nm = #{menuNm, jdbcType=VARCHAR},
			</if>
			<if test="menuDescr != null">
				menu_dscr = #{menuDescr, jdbcType=VARCHAR},
			</if>
			<if test="menuUrl != null">
				menu_path = #{menuUrl, jdbcType=VARCHAR},
			</if>
			<if test="menuIdx != null">
				menu_idx = #{menuIdx, jdbcType=INTEGER},
			</if>
			<if test="useYn != null">
				use_yn = #{useYn, jdbcType=VARCHAR},
			</if>
			<if test="hposMenuId != null">
			hpos_menu_id = #{hposMenuId, jdbcType=VARCHAR},
			</if>
			upd_dt = current_timestamp(),
			upd_user_id = #{updUsrId, jdbcType=VARCHAR}
		</set>
		WHERE menu_id = #{menuId, jdbcType=VARCHAR}
	</update>

	<delete id="deleteMenu" parameterType="java.lang.String">
        /*
        SQL ID : kr.co.dsi.system.menu.dao.MenuDao.deleteMenu
        SQL 명: 메뉴 삭제
        */
        DELETE FROM tb_menu
        WHERE menu_id = #{menuId, jdbcType=VARCHAR}
    </delete>

	<delete id="deleteAllMenu">
        /*
        SQL ID : kr.co.dsi.system.menu.dao.MenuDao.deleteAllMenu
        SQL 명: 모든 메뉴 삭제
        */
        DELETE FROM tb_menu
    </delete>

	<select id="selectMenuAll" resultType="kr.co.dsi.system.menu.entity.Menu">
        /*
        SQL ID : kr.co.dsi.system.menu.dao.MenuDao.getMenu
        SQL 명 : 메뉴 단건 또는 목록 조회(관리자 용도)
        */
        SELECT
        a.menu_id /* 메뉴 아이디 */
        ,a.menu_kd_cd /* 메뉴 타입(관리자, 사용자) */
        ,a.menu_nm /* 메뉴 명 */
        ,a.menu_path as menu_url /* 메뉴 링크 */
        ,a.menu_descr /* 메뉴 설명 */
        ,a.menu_idx /* 메뉴 순서 */
        ,a.use_yn /* 사용 여부 */
        ,a.crte_dt /* 생성 일시 */
        ,a.crte_usr_id as create_user_id /* 생성자 아이디 */
        ,a.hpos_menu_id /* 상위 메뉴 아이디 */
        ,a.upd_dt /* 수정 일시 */
        ,a.upd_usr_id /* 수정자 아이디 */
        FROM TB_MENU a
    </select>

	<delete id="deleteMenuList" parameterType="java.util.List">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.deleteMenuList
		SQL 명: 지정된 메뉴(목록) 삭제
		*/
		DELETE FROM TB_MENU
		WHERE
			menu_id IN
				<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
	                 #{item.menuId}
	            </foreach>
	</delete>

	<select id="checkRoleMenuMapg" parameterType="java.util.List" resultType="kr.co.dsi.system.menu.entity.Menu">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.checkRoleMenuMapg
		SQL 명: 입력되는 메뉴 목록 기준으로 역할-메뉴 매핑 정보가 있는지 체크한다.
		*/
		SELECT
			 map.menu_id
			,mnu.menu_nm
		FROM TB_ROLE_MENU_MAPG map
		LEFT OUTER JOIN TB_MENU mnu on map.menu_id = mnu.menu_id
		WHERE
		map.menu_id IN
		<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
		     #{item.menuId}
		</foreach>
		GROUP BY map.menu_id, mnu.menu_nm
	</select>
	
	<select id="checkDuplicateMenuId" parameterType="kr.co.dsi.system.menu.entity.Menu" resultType="int">
		SELECT COUNT(MENU_ID) 
		  FROM TB_MENU
		 WHERE MENU_ID = #{menuId}
	</select>
	
	<select id="checkDuplicateMenuNm" parameterType="kr.co.dsi.system.menu.entity.Menu" resultType="int">
		SELECT COUNT(MENU_NM) 
		  FROM TB_MENU
		 WHERE MENU_NM = #{menuNm}
	</select>
	
	<update id="updateMenuIndexs" parameterType="kr.co.dsi.system.menu.dto.req.MenuIndexReqDto">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.updateMenuIndexs
		SQL 명: 메뉴 인덱스 변경
		*/
		UPDATE TB_MENU
		<set>
			<if test="menuIdx != null">
				menu_idx = #{menuIdx, jdbcType=INTEGER},
			</if>
			upd_dt = current_timestamp(),
			upd_user_id = #{updUsrId, jdbcType=VARCHAR}
		</set>
		WHERE menu_id = #{menuId, jdbcType=VARCHAR}
	</update>	
	
	<select id="selectHposMenuIdsToList" parameterType="java.util.List" resultType="kr.co.dsi.system.menu.entity.Menu">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.selectHposMenuIdsToList
		SQL 명: 메뉴 부모 아이디 조회
		*/
		SELECT
			HPOS_MENU_ID
		FROM TB_MENU
		WHERE
			MENU_ID in
		<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
		     #{item.hposMenuId}
		</foreach>
	</select>
	
	<select id="selectMenuIdsToList" parameterType="java.util.List" resultType="kr.co.dsi.system.menu.dto.res.MenuReadResDto">
		/*
		SQL ID : dao.menu.co.kr.b2b.idp.system.MenuDao.selectMenuIdsToList
		SQL 명 : 메뉴 조회
		*/
		SELECT
			result.menu_id																		/* 메뉴 아이디 */
			,case when mnu.hpos_menu_id IS NULL then '#' else mnu.hpos_menu_id end as parent_menu_id		/* 상위 메뉴 아이디 */
			,mnu.menu_idx	as menu_index														/* 메뉴 순서 */
			,result.menu_path																	/* 메뉴 경로 */
			,result.menu_url																	/* 메뉴 링크 */
			,result.menu_order																	/* 메뉴 트리 정렬 순서 */
			,result.menu_nm as menu_name														/* 메뉴 명 */
			,result.lvl as LEVEL																/* 메뉴 깊이 */
			,mnu.menu_kd_cd as menu_kind_code													/* 메뉴 타입(관리자, 사용자) */
			,mnu.menu_dscr as menu_description													/* 메뉴 설명 */
			,GROUP_CONCAT(DISTINCT role.role_nm) as roleMappingInfo								/* 매핑된 역할명 정보 */
			,mnu.use_yn																			/* 사용 여부 */
			,result.assigned
			,date_format(mnu.reg_dt, '%Y-%m-%d %H:%i') as create_date														/* 생성 일시 */
			,date_format(mnu.upd_dt, '%Y-%m-%d %H:%i') as update_date															/* 수정 일시 */
			,mnu.reg_user_id as create_user_id													/* 생성자 아이디 */
			,mnu.upd_user_id as update_user_id													/* 수정자 아이디 */
			,u1.user_nm as create_user_name														/* 생성자 명	*/
			,u2.user_nm as update_user_name														/* 수정자 명	*/
		FROM(
			WITH RECURSIVE cte AS (
				SELECT
					menu_id
					, menu_nm
					, hpos_menu_id
					, 1 AS lvl
					, menu_nm AS menu_path
					, CONVERT(menu_idx, CHAR) AS menu_order
					, menu_path as menu_url
					, menu_kd_cd
				FROM TB_MENU
				WHERE
					hpos_menu_id IS NULL
				UNION ALL

				SELECT
					b.menu_id
					, b.menu_nm
					, b.hpos_menu_id
					, c.lvl+1 AS lvl
					, CONCAT(c.menu_path,' > ', b.menu_nm) AS menu_path
					, CONCAT(c.menu_order,',', b.menu_idx) AS menu_order
					, b.menu_path as menu_url
					, b.menu_kd_cd
				FROM TB_MENU b
				INNER JOIN cte c
					ON b.hpos_menu_id = c.menu_id
			)
			SELECT
				a.menu_id																				/* 메뉴 아이디 */
				,a.menu_path																			/* 메뉴 경로 */
				,a.menu_url																				/* 메뉴 링크 */																			
				,a.menu_order																			/* 메뉴 트리 정렬 기준 */
				,a.menu_nm																				/* 메뉴 명 */
				,a.lvl																					/* 메뉴 깊이 */
				,case when COUNT(mapg.MENU_ID) > 0 then TRUE ELSE FALSE END AS assigned
			FROM cte a
			LEFT OUTER JOIN TB_ROLE_MENU_MAPG mapg
				ON a.menu_id = mapg.MENU_ID
				WHERE
					a.MENU_ID in
						<foreach collection="list" item="item" index="index" separator="," open="(" close=")">
						     #{item}
						</foreach>
			GROUP BY a.menu_id, a.menu_path, a.menu_nm, a.lvl, a.menu_url, a.menu_order
		) result
		INNER JOIN TB_MENU mnu ON result.menu_id = mnu.menu_id
		LEFT OUTER JOIN TB_USER u1 ON mnu.reg_user_id = u1.user_id
		LEFT OUTER JOIN TB_USER u2 ON mnu.upd_user_id = u2.user_id
		LEFT OUTER JOIN TB_ROLE_MENU_MAPG mapg on mnu.menu_id = mapg.menu_id
		LEFT OUTER JOIN TB_ROLE role on mapg.role_id = role.role_id
		GROUP BY
			result.menu_id
			,mnu.hpos_menu_id
			,mnu.menu_idx
			,result.menu_path
			,result.menu_url
			,result.menu_order
			,result.menu_nm
			,result.lvl
			,mnu.menu_kd_cd
			,mnu.menu_dscr
			,mnu.use_yn
			,result.assigned
			,mnu.reg_dt
			,mnu.upd_dt
			,mnu.reg_user_id
			,mnu.upd_user_id
			,u1.user_nm
			,u2.user_nm
			,mapg.menu_id
		ORDER by result.menu_order asc
	</select>

</mapper>
